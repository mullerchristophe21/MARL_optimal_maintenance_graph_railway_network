# --- Defaults ---

# --- pymarl options ---
runner: "episode" # Runs 1 env for an episode
mac: "basic_mac" # Basic controller
env: "sc2" # Environment name
env_args: {} # Arguments for the environment
batch_size_run: 10 # Number of environments to run in parallel
test_nepisode: 5 # Number of episodes to test for
test_interval: 2000 # Test after {} timesteps have passed
test_greedy: True # Use greedy evaluation (if False, will set epsilon floor to 0
log_interval: 2000 # Log summary of stats after every {} timesteps
runner_log_interval: 2000 # Log runner stats (not test stats) every {} timesteps
learner_log_interval: 2000 # Log training stats every {} timesteps
t_max: 10000 # Stop running after this many timesteps
use_cuda: False # Use gpu by default unless it isn't available
buffer_cpu_only: True # If true we won't keep all of the replay buffer in vram

# --- Logging options ---
use_tensorboard: False # Log results to tensorboard
save_model: False # Save the models to disk
save_model_interval: 50000 # Save models after this many timesteps
checkpoint_path: "" # Load a checkpoint from this path
evaluate: False # Evaluate model for test_nepisode episodes and quit (no training)
render: False # Render the environment when evaluating (only when evaluate == True)
load_step: 0 # Load model trained on this many timesteps (0 if choose max possible)
save_replay: False # Saving the replay of the model loaded from checkpoint_path
local_results_path: "results" # Path for local results

# --- RL hyperparameters ---
gamma: 0.99
batch_size: 32 # Number of episodes to train on
buffer_size: 32 # Size of the replay buffer
lr: 0.0005 # Learning rate for agents
optim_alpha: 0.99 # RMSProp alpha
optim_eps: 0.00001 # RMSProp epsilon
grad_norm_clip: 10 # Reduce magnitude of gradients above this L2 norm
add_value_last_step: True

# --- Agent parameters ---
agent: "rnn" # Default rnn agent
hidden_dim: 64 # Size of hidden state for default rnn agent
obs_agent_id: False # Include the agent's one_hot id in the observation
obs_last_action: True # Include the agent's last action (one_hot) in the observation

# --- Experiment running params ---
repeat_id: 1
label: "default_label"
hypergroup: null



# --- CHRIS ADDITIONS ---
use_shared_gnn: False                   # IF TRUE, Use PPO_LEARNER_SHARED, otherwise use PPO_LEARNER.
use_shared_transformer: False

use_graph_input: True
use_6_graph_input: False
hidden_dim_gnn: 32
n_layers_gnn: 5



# # --- Defaults ---

# # --- pymarl options ---
# runner: "parallel"          # Runs 1 env for an episode
# mac: "basic_mac"            # Basic controller
# batch_size_run: 4           # Number of environments to run in parallel
# test_nepisode: 4            # Number of episodes to test for
# test_interval: 50000          # Test after {} timesteps have passed
# test_greedy: True           # Use greedy evaluation (if False, will set epsilon floor to 0
# log_interval: 20000         # Log summary of stats after every {} timesteps
# runner_log_interval: 20000    # Log runner stats (not test stats) every {} timesteps
# learner_log_interval: 20000   # Log training stats every {} timesteps
# t_max: 1000000                 # Stop running after this many timesteps
# use_cuda: False             # Use gpu by default unless it isn't available
# buffer_cpu_only: True       # If true we won't keep all of the replay buffer in vram

# # --- Logging options ---
# use_tensorboard: False      # Log results to tensorboard
# save_model: True           # Save the models to disk
# save_model_interval: 500000 # Save models after this many timesteps
# checkpoint_path: ""         # Load a checkpoint from this path
# evaluate: False             # Evaluate model for test_nepisode episodes and quit (no training)
# render: False               # Render the environment when evaluating (only when evaluate == True)
# load_step: 0                # Load model trained on this many timesteps (0 if choose max possible)
# save_replay: False          # Saving the replay of the model loaded from checkpoint_path
# local_results_path: "epymarl/results" # Path for local results

# # --- RL hyperparameters ---
# gamma: 0.99
# batch_size: 8              # Number of episodes to train on
# buffer_size: 32             # Size of the replay buffer
# lr: 0.00012                  # Learning rate for agents
# optim_alpha: 0.99           # RMSProp alpha
# optim_eps: 0.00001          # RMSProp epsilon
# grad_norm_clip: 4          # Reduce magnitude of gradients above this L2 norm
# add_value_last_step: True

# # --- Agent parameters ---
# agent: "actor_transformer"                # Default rnn agent
# dummy_policy_action: 0       # ALWAYS ACTION if agent = rnn_dummy
# hidden_dim: 8               # Size of hidden state for default rnn agent
# obs_agent_id: False          # Include the agent's one_hot id in the observation
# obs_last_action: False       # Include the agent's last action (one_hot) in the observation

# # --- Experiment running params ---
# repeat_id: 1
# label: "default_label"
# hypergroup: null


# # --- ALGO specific parameters ---

# # --- IPPO specific parameters ---
# name: "r22_transformer_baseline_test_search"
# action_selector: "soft_policies"
# mask_before_softmax: True
# target_update_interval_or_tau: 0.01
# obs_individual_obs: False
# agent_output_type: "pi_logits"
# learner: "ppo_learner"
# entropy_coef: 0.01
# standardise_returns: True
# standardise_rewards: True
# use_rnn: False
# q_nstep: 6
# critic_type: "critic_transformer"
# epochs: 4
# eps_clip: 0.2
# use_shared_gnn: False                   # IF TRUE, Use PPO_LEARNER_SHARED, otherwise use PPO_LEARNER.

# pos_enc_dim: 5
# encoder_dim_transformer: 4
# num_heads: 2
# layer_norm: True
# batch_norm: False
# residual: True
# use_bias: False
# n_layers_transformers: 2

# use_graph_input: False
# use_6_graph_input: False
# transformer_encoder_concat: False
# neigh_attention: False